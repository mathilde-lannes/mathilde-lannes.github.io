{"componentChunkName":"component---src-pages-pensieve-index-js","path":"/pensieve/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Dark Mode Toggle","description":"Dark mode without the flash of default theme","slug":"/pensieve/dark-mode-toggle","date":"2021-04-21T00:00:00.000Z","tags":["Theming","Dark Mode"],"draft":false},"html":"<p>Dark mode toggle without the flash of default theme. Important bits:</p>\n<ul>\n<li>CSS variables for color theming</li>\n<li>Put <code>data-theme</code> attribute on <code>&#x3C;html></code>, not <code>&#x3C;body></code>, so we can run the JS before the DOM finishes rendering</li>\n<li>Run local storage check in the <code>&#x3C;head></code></li>\n<li>JS for toggle button click handler can come after render</li>\n</ul>\n<h2>HTML</h2>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\" data-theme=\"light\">\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    ...\n    &#x3C;script>\n      // If there's a theme stored in localStorage, use it on the &#x3C;html>\n      const localStorageTheme = localStorage.getItem('theme');\n      if (localStorageTheme) {\n        document.documentElement.setAttribute('data-theme', localStorageTheme);\n      }\n    &#x3C;/script>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div class=\"theme-toggle\">\n      &#x3C;button\n        class=\"theme-toggle-btn js-theme-toggle\"\n        aria-label=\"Activate dark mode\"\n        title=\"Activate dark mode\"\n      >\n        &#x3C;!--\n        &#x3C;svg class=\"light-mode\">\n          &#x3C;use xlink:href=\"#sun\">&#x3C;/use>\n        &#x3C;/svg>\n        &#x3C;svg class=\"dark-mode\">\n          &#x3C;use xlink:href=\"#moon\">&#x3C;/use>\n        &#x3C;/svg>\n        -->\n      &#x3C;/button>\n    &#x3C;/div>\n\n    &#x3C;script src=\"app.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h2>CSS Variables</h2>\n<pre><code class=\"language-css\">:root {\n  --bg: #ffffff;\n  --text: #000000;\n}\n\n[data-theme='dark'] {\n  --bg: #000000;\n  --text: #ffffff;\n}\n</code></pre>\n<h2>JavaScript</h2>\n<pre><code class=\"language-js:title=app.js\">const themeToggleBtn = document.querySelector('.js-theme-toggle');\n\nthemeToggleBtn.addEventListener('click', () => onToggleClick());\n\nconst onToggleClick = () => {\n  const { theme } = document.documentElement.dataset;\n  const themeTo = theme &#x26;&#x26; theme === 'light' ? 'dark' : 'light';\n  const label = `Activate ${theme} mode`;\n\n  document.documentElement.setAttribute('data-theme', themeTo);\n  localStorage.setItem('theme', themeTo);\n\n  themeToggleBtn.setAttribute('aria-label', label);\n  themeToggleBtn.setAttribute('title', label);\n};\n</code></pre>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\">https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/</a></li>\n<li><a href=\"https://css-tricks.com/flash-of-inaccurate-color-theme-fart/\">https://css-tricks.com/flash-of-inaccurate-color-theme-fart/</a></li>\n<li><a href=\"https://mxb.dev/blog/color-theme-switcher/\">https://mxb.dev/blog/color-theme-switcher/</a></li>\n<li><a href=\"https://www.joshwcomeau.com/react/dark-mode/\">https://www.joshwcomeau.com/react/dark-mode/</a></li>\n<li><a href=\"https://web.dev/prefers-color-scheme/\">https://web.dev/prefers-color-scheme/</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"Accessible Clickable Cards","description":"Clickable cards with multiple child links","slug":"/pensieve/clickable-cards","date":"2021-04-21T00:00:00.000Z","tags":["Accessibility","CSS"],"draft":false},"html":"<p><a href=\"https://codepen.io/bchiang7/pen/xxRBvgd?editors=1100\">Codepen Demo</a></p>\n<p>Card layout where the card itself isn't an anchor link, but the whole card is clickable (with a <code>:before</code> pseudo element on the main <code>&#x3C;a></code>). Links inside of the card are still clickable.</p>\n<h2>CSS</h2>\n<pre><code class=\"language-css\">.grid__item {\n  &#x26;:hover,\n  &#x26;:focus-within {\n    background-color: #eee;\n  }\n\n  a {\n    position: relative;\n    z-index: 1;\n  }\n\n  h2 {\n    a {\n      position: static;\n\n      &#x26;:hover,\n      &#x26;:focus {\n        color: blue;\n      }\n\n      &#x26;:before {\n        content: '';\n        display: block;\n        position: absolute;\n        z-index: 0;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        transition: background-color 0.1s ease-out;\n        background-color: transparent;\n      }\n    }\n  }\n}\n</code></pre>"}},{"node":{"frontmatter":{"title":"Docker Compose Error","description":"docker-compose version discrepancies","slug":"/pensieve/docker-error","date":"2019-12-13","tags":["WordPress","Docker"],"draft":false},"html":"<h2>Problem</h2>\n<p>Recently while updating with <a href=\"https://github.com/Upstatement/skela-wp-theme\">Skela</a> with webpack, I encountered a weird error where I wasn't able to run a simple script:</p>\n<pre><code class=\"language-shell:title=bin/composer\">#!/bin/bash\ndocker-compose exec -w /var/www/html/wp-content/themes/skela wordpress composer \"$@\"\n</code></pre>\n<p>When trying to run this script via <code>./bin/composer install</code>, I got this error in my terminal:</p>\n<pre><code class=\"language-shell\">ERROR: Setting workdir for exec is not supported in API &#x3C; 1.35 (1.30)\n</code></pre>\n<p>The error was coming from the <code>-w</code> flag in the <code>docker-compose exec</code> command in the <code>composer</code> script.</p>\n<h2>Solution</h2>\n<p>Turns The fix was to update the version in my <code>docker-compose.yml</code> file to from version <code>3.5</code> to <code>3.6</code>. It's strange because 3.5 isn't anywhere close to the API version <code>1.35</code> from the error message ü§∑‚Äç‚ôÄÔ∏è</p>\n<pre><code class=\"language-yaml:title=docker-compose.yml\">version: '3.6' # highlight-line\nservices:\n  wordpress:\n    build:\n</code></pre>"}},{"node":{"frontmatter":{"title":"WordPress Publishing Error","description":"Trying to create a simple post in WordPress","slug":"/pensieve/wordpress-publish-error","date":"2019-12-03T00:00:00.000Z","tags":["WordPress"],"draft":false},"html":"<h2>Problem</h2>\n<p>Recently while working on a WordPress project with <a href=\"https://github.com/Upstatement/ups-dock\">Ups Dock</a>, I encountered a weird error where I wasn't able to update or publish a simple post in my local WP admin.</p>\n<p>It looked something like this:</p>\n<p><img src=\"draft-fail.png\" alt=\"Draft fail\"></p>\n<p>Sometimes the error message would be slightly more helpful: <code>Publishing failed. Error message: The response is not a valid JSON response.</code></p>\n<p><img src=\"publish-error.png\" alt=\"Publish error\"></p>\n<p>And if I popped open the console, I saw these errors:</p>\n<p><img src=\"console-errors.png\" alt=\"Console errors\"></p>\n<h2>Solution</h2>\n<p>Since the error message had to do with a JSON response, I initially thought it was a Gutenberg or ACF issue. But it turned out this was happening because I was on the https WP admin (i.e. <a href=\"https://project.ups.dock/wp-admin\">https://project.ups.dock/wp-admin</a>), not the unsecure WP admin (<a href=\"http://project.ups.dock/wp-admin\">http://project.ups.dock/wp-admin</a>).</p>\n<p>It was a CORS error!! I was trying to modify a non-https domain from a https domain. Switching to a non-https WP admin allowed me to publish posts with no problem.</p>"}}]}},"pageContext":{}},"staticQueryHashes":["2087975078"],"slicesMap":{}}